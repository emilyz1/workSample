using System;

class cell{
  public bool isMine{get; set;}  //is the cell a mine?
  public int adjMines{get; set;}  //# of adjacent mines

  public cell(){  //creates default non-mine cell with no adjacent mines
    isMine = false;
    adjMines = 0;
  }
}

class grid{
  public cell[,] board;
  public int rows;
  public int columns;
  public double mineRate = 0.1;  //rate at which mines appear in the board
  Random rand = new Random();  //random double generator (used to determine where mines will be placed)

  public grid(int r, int c){  //grid constructor
    this.rows = r;
    this.columns = c;
  }

  public int getRows{  //returns # of rows
    get{return this.rows;}
  }

  public int getColumns{  //returns # of columns
    get{return this.columns;}
  }

  public void emptyGrid(){  //creates and initializes empty grid with non-mine cells
    board = new cell[rows, columns];
    for(int i = 0; i < rows; i++){
      for(int j = 0; j < columns; j++){
        board[i, j] = new cell();
      }
    }
  }

  public void genMines(){  //randomly plots cells throughout the grid
    for(int i = 0; i < rows; i++){
      for(int j = 0; j < columns; j++){
        if(rand.NextDouble() < mineRate){
          board[i, j].isMine = true;
        }
      }
    }
  }

  public void printGrid(){  //traverses and prints grid
      for(int i = 0; i < rows; i++){
      for(int j = 0; j < columns; j++){
        Console.Write(board[i,j].isMine + " ");
      }
      Console.WriteLine();
    }
    Console.WriteLine();
  }
}


class Program{
  public static void Main(string[] args){
    //establish grid dimensions
    Console.WriteLine("Number of rows:");
    int rows = Convert.ToInt16(Console.ReadLine());
    Console.WriteLine("Number of columns:");
    int columns = Convert.ToInt16(Console.ReadLine());

    grid board = new grid(rows, columns);  //create grid
    board.emptyGrid();  //initializes and prints grid
    board.printGrid(); 

    board.genMines();  //generates mines, then reprints grid
    board.printGrid();
  }
}
